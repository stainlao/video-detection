version: "3.9"

services:
  db_orchestrator:
    image: postgres:15
    container_name: pg_orchestrator
    restart: unless-stopped
    environment:
      POSTGRES_DB: orchestrator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_orchestrator_data:/var/lib/postgresql/data
    networks:
      - backend

  db_api:
    image: postgres:15
    container_name: pg_api
    restart: unless-stopped
    environment:
      POSTGRES_DB: api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_api_data:/var/lib/postgresql/data
    networks:
      - backend

  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/Dockerfile
    container_name: orchestrator_service
    depends_on:
      - db_orchestrator
      - kafka
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db_orchestrator:5432/orchestrator
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: api_service
    depends_on:
      - db_api
      - kafka
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db_api:5432/api
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8000:8000"
    networks:
      - backend

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - backend

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - backend

  # ---------- S3-совместимое хранилище MinIO ----------
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --address 0.0.0.0:9000 /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - backend


  minio-init:
    image: minio/mc
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb -p myminio/mybucket;
      /usr/bin/mc policy set public myminio/mybucket;
      exit 0;
      "
    networks:
      - backend

  # ------------------ RUNNER-1 -------------------
  runner1:
    build:
      context: .
      dockerfile: runner/Dockerfile
    container_name: runner1
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      S3_BUCKET: mybucket
      S3_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL: http://minio:9000
      RUNNER_ID: runner-1
    depends_on:
      - kafka
      - minio
    networks:
      - backend

  # ------------------ RUNNER-2 (резервный) -------------------
  runner2:
    build:
      context: .
      dockerfile: runner/Dockerfile
    container_name: runner2
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      S3_BUCKET: mybucket
      S3_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL: http://minio:9000
      RUNNER_ID: runner-2
    depends_on:
      - kafka
      - minio
    networks:
      - backend

volumes:
  postgres_orchestrator_data:
  postgres_api_data:
  minio_data:

networks:
  backend: {}
